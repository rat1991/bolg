<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://rat1991.github.io</id>
    <title>Rat</title>
    <updated>2020-12-25T00:24:14.220Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://rat1991.github.io"/>
    <link rel="self" href="https://rat1991.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://rat1991.github.io/images/avatar.png</logo>
    <icon>https://rat1991.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Rat</rights>
    <entry>
        <title type="html"><![CDATA[了解pm2进程管理的配置与使用]]></title>
        <id>https://rat1991.github.io/post/pm2_config/</id>
        <link href="https://rat1991.github.io/post/pm2_config/">
        </link>
        <updated>2020-12-24T12:19:22.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="概述">概述</h1>
<p>PM2是一个带有负载均衡功能的Node应用的进程管理，允许你的node应用保持存活，重新加载无需停机。</p>
<h1 id="安装">安装</h1>
<p><code>npm install pm2 -g</code></p>
<h1 id="命令概述">命令概述</h1>
<pre><code></code></pre>
]]></summary>
        <content type="html"><![CDATA[<h1 id="概述">概述</h1>
<p>PM2是一个带有负载均衡功能的Node应用的进程管理，允许你的node应用保持存活，重新加载无需停机。</p>
<h1 id="安装">安装</h1>
<p><code>npm install pm2 -g</code></p>
<h1 id="命令概述">命令概述</h1>
<pre><code>&lt;!-- more --&gt;

# 常用
pm2 start app.js                # 启动 守护进程 并且 重启应用 (Node)
pm2 start app.py               # 启动 守护进程 并且 重启应用 (Python)
pm2 start npm -- start       # 启动 守护进程 并且 重启应用

# 集群模式 (仅限Node.js)
pm2 start app.js -i 4           # 在集群模式下启动4个应用实例
                                        # 它将加载平衡网络查询到每个应用程
pm2 reload all                    # 0 秒停机重新加载
pm2 scale [app-name] 10   # 扩展 10个进程到集群中

# 进程监控
pm2 list                      # 使用PM2列出所有的过程
pm2 monit                     # 显示应用程序的内存和CPU的使用情况
pm2 show [app-name]           # 显示[app-name]应用程序的信息

# 日志管理
pm2 logs                      # 显示所有应用程序的日志
pm2 logs [app-name]           # 显示特定应用程序的日志
pm2 logs --json               # JSON格式的日志
pm2 flush
pm2 reloadLogs

# 过程状态管理
pm2 start app.js --name=&quot;api&quot;    # 启动应用程序并命名它为“api”
pm2 start app.js -- -a 34           # 启动应用程序和传递选项“-a 34”作为参数
pm2 start app.js --watch            # 监控文件变化并重启
pm2 start script.sh                     # 启动bash脚本
pm2 start app.json                     # 通过配置文件启动应用
pm2 reset [app-name]                # 重置所有计数器
pm2 stop all                  # 停止所有的应用程序
pm2 stop 0                    # 停止进程id为0的应用
pm2 restart all               # 重新启动所有的应用程序
pm2 gracefulReload all        # 在集群模式下优雅重载所有应用程序
pm2 delete all                # 杀死和删除所有应用程序
pm2 delete 0                  # 杀死进程id为0的应用 

# 启动/启动管理
pm2 startup                    # 检测系统初始化，生成和启动配置PM2 boot
pm2 save                       # 保存当前进程列表
pm2 resurrect                # 恢复以前保存进程
pm2 unstartup               # 禁用和删除启动系统
pm2 update                  # 保存进程, 杀死 PM2 并 恢复进程
pm2 generate               # 生成JSON配置文件示例

# 部署
pm2 deploy app.json prod setup    # 设置 &quot;prod&quot; 远程服务器
pm2 deploy app.json prod             # 更新 &quot;prod&quot; 远程服务器
pm2 deploy app.json prod revert 2 # 回复2 &quot;prod&quot; 远程服务器

# 系统模块
pm2 module:generate [name]    # 以[name]生成示例模块
pm2 install pm2-logrotate        # 安装模块（这里有一个日志轮换系统）
pm2 uninstall pm2-logrotate    # 卸载模块
pm2 publish                           # 增加版本号，git push和NPM发布
</code></pre>
<h1 id="配置文件">配置文件</h1>
<p>PM2可使用配置文件进行启动，在package.json 的scripts里添加 &quot;start&quot;: &quot;pm2 start pm2-config.json&quot;这一段代码这样我们就可以使用 npm run start来启动我们的Node项目。</p>
<h3 id="配置文件详细介绍">配置文件详细介绍</h3>
<pre><code class="language-json">{
    &quot;apps&quot;: {
        &quot;name&quot;: &quot;wuwu&quot;,                             // 项目名          
        &quot;script&quot;: &quot;./bin/www&quot;,                      // 执行文件
        &quot;cwd&quot;: &quot;./&quot;,                                // 根目录
        &quot;args&quot;: &quot;&quot;,                                 // 传递给脚本的参数
        &quot;interpreter&quot;: &quot;&quot;,                          // 指定的脚本解释器
        &quot;interpreter_args&quot;: &quot;&quot;,                     // 传递给解释器的参数
        &quot;watch&quot;: true,                              // 是否监听文件变动然后重启
        &quot;ignore_watch&quot;: [                           // 不用监听的文件
            &quot;node_modules&quot;,
            &quot;logs&quot;
        ],
        &quot;exec_mode&quot;: &quot;cluster_mode&quot;,                // 应用启动模式，支持fork和cluster模式
        &quot;instances&quot;: 4,                             // 应用启动实例个数，仅在cluster模式有效 默认为fork；或者 max
        &quot;
        &quot;merge_logs&quot;: true,                         // 设置追加日志而不是新建日志
        &quot;log_date_format&quot;: &quot;YYYY-MM-DD HH:mm:ss&quot;,   // 指定日志文件的时间格式
        &quot;min_uptime&quot;: &quot;60s&quot;,                        // 应用运行少于时间被认为是异常启动
        &quot;max_restarts&quot;: 30,                         // 最大异常重启次数，即小于min_uptime运行时间重启次数；
        &quot;autorestart&quot;: true,                        // 默认为true, 发生异常的情况下自动重启
        &quot;cron_restart&quot;: &quot;&quot;,                         // crontab时间格式重启应用，目前只支持cluster模式;
        &quot;restart_delay&quot;: &quot;60s&quot;                      // 异常重启情况下，延时重启时间
        &quot;env&quot;: {
           &quot;NODE_ENV&quot;: &quot;production&quot;,                // 环境参数，当前指定为生产环境 process.env.NODE_ENV
           &quot;REMOTE_ADDR&quot;: &quot;爱上大声地&quot;               // process.env.REMOTE_ADDR
        },
        &quot;env_dev&quot;: {
            &quot;NODE_ENV&quot;: &quot;development&quot;,              // 环境参数，当前指定为开发环境 pm2 start app.js --env_dev
            &quot;REMOTE_ADDR&quot;: &quot;&quot;
        }
    }
}    
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://rat1991.github.io/post/hello-gridea/</id>
        <link href="https://rat1991.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>