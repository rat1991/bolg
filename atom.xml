<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://rat1991.github.io</id>
    <title>Rat</title>
    <updated>2020-07-28T11:37:18.962Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://rat1991.github.io"/>
    <link rel="self" href="https://rat1991.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://rat1991.github.io/images/avatar.png</logo>
    <icon>https://rat1991.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Rat</rights>
    <entry>
        <title type="html"><![CDATA[Flytiger-Biz前端开发指南]]></title>
        <id>https://rat1991.github.io/post/flytiger-biz-qian-duan-kai-fa-zhi-nan/</id>
        <link href="https://rat1991.github.io/post/flytiger-biz-qian-duan-kai-fa-zhi-nan/">
        </link>
        <updated>2020-06-15T12:39:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="侧边菜单动态生成">侧边菜单动态生成</h2>
<p>前端生成侧边菜单需要通过 <a href="http://192.172.9.142:3000/project/22/interface/api/260"><code>接口 /permit/permitMenu/listUserMenuTree</code></a>获取菜单数据和权限列表进行生成。<br>
而调用<code>listUserMenuTree接口</code>前需要调用<a href="">/selectDefaultTenant</a>来获取默认租户，流程如下：</p>
<pre><code class="language-mermaid">   登录成功 --&gt; 调用获取默认租户 ---&gt; 调用获取菜单数据
</code></pre>
<p>获取到菜单数据后需要对数据进行处理生成前端路由（routes）数据，再根据路由routes数据去生成菜单组件。具体生成思路如下：</p>
<pre><code class="language-javascript">/**
 * 过滤菜单数据
 * @param {Array} list -后台返回的菜单数据
 * @param {Object} parent -缓存父级对象
 * @returns {Array}
 */
function sortUserMenus(list, parent) {
  const menus = []
  const access = []
  list.forEach(item =&gt; {
    if (item.category === 1) {
      if (item.children) {
        item.children = sortUserMenus(item.children, item)
      }
      menus.push(item)
    } else {
      access.push({ code: item.code, name: item.name })
    }
  })
  if (parent &amp;&amp; access.length) {
      // 把过滤出的权限列表保存在父节点
    parent['_access'] = access
  }
  return menus.length ? menus : null
}
</code></pre>
<p>以上函数主要是抽离菜单页面路由的权限列表，因为后端返回的数据是以菜单和页面按钮权限一起的树形结构，需要将页面按钮权限抽离处理。</p>
<pre><code class="language-javascript">// 缓存生成的页面路由
let cacheRouters = []
/**
 * 合并路由路径
 * @param  {...any} arg -路径字符
 */
function resolvePath(...arg) {
  return arg.map(url =&gt; {
    return url.split('/').filter(v =&gt; v!=='').join('/')
  }).join('/')
}
/**
 * routes生成器
 * @param {*} menus -后端响应数据
 * @param {*} parentPath -父节点路径
 */
function routesGenerator(menus, parentPath='/') {
  return menus.map(item =&gt; {
    const isChild = item.children &amp;&amp; item.children.length
    const isTop = item.parentId === '0'
    const tpl = {
      path: resolvePath(parentPath, item.code),
      name: item.name,
      meta: {
        icon: item.icon || 'md-document',
        hideInMenu: false,
        notCache: true
      },
    }
    if (!isTop) {
      tpl.path = '/' + tpl.path
      tpl.name = item.code
      tpl.meta.title = item.name
      // requireAuth为true表明该路由需要权限才能进入
      tpl.meta.requireAuth = true
      // 将按钮权限列表放置在前端路由的meta.authList属性上
      if (item._access) {
        tpl.meta.authList = item._access.map(item =&gt; item.code)
      }
    }
    // 判断路径是否为路由组件还是url
    if (item.isOpen) {
      tpl.meta.href = item.path
    } else {
      tpl.component = () =&gt; isTop 
      ? import('@/components/main') 
      : import(`@/view/module/${resolvePath(item.path)}.vue`)
    }
    // 带有子节点递归处理
    if (isChild) {
      tpl.children = routesGenerator(item.children, tpl.path)
      tpl.redirect = tpl.children[0].path
    }
    return tpl
  })
}
/**
 * 主要为生成的routes后加入404页面路由
 * @param {*} menus -后端响应数据
 */
function createMenuRoutes(menus) {
  const unableCatchRoute = {
    path: '/404',
    name: 'error_404',
    meta: {
      hideInMenu: true
    },
    component: () =&gt; import('@/view/error-page/404.vue')
  }
  return [...routesGenerator(menus), unableCatchRoute]
}

function initRoutes(menus) {
  if (cacheRouters.length) return
  cacheRouters = createMenuRoutes(menus)
  router.onReady(() =&gt; {
    // 将生成的routes数据添加在前端路由表
    router.addRoutes(cacheRouters)
    routes.push(...cacheRouters)
    store.commit('setRoutesReady')
  })
}
</code></pre>
<p>通过调用initRoutes()方法将生成的routes数据动态加载的路由中。<br>
最后生成的数据如下：<br>
<img src="https://rat1991.github.io/post-images/1592228665717.png" alt="" loading="lazy"><br>
其中authList为当前路由的按钮权限列表，这样我们可以通过页面组件内的this.$route去获取到它，从而可以根据列出的权限去控制页面按钮的展示。<br>
权限列表中带有<strong>VIEW、ADD、EDIT、DELETE、ENABLE</strong>等分别查看、添加、编辑、删除、禁用的标识，根据标识去控制相应权限的按钮显示。</p>
<p>一般情况下可通过定义全局方法去统一判断：</p>
<pre><code class="language-javascript">/**
 * 按钮全新控制
 *authorities 多个用,号隔开
 * v-show=&quot;$hasAuthority('systemUserCreate')&quot;
 * @param authorities
 * @returns {boolean}
 */
Object.defineProperty(Vue.prototype, '$hasAuthority', {
  value(authorities, isCustom) {
    if (!authorities) return false
    const { authList= [] } = this.$route.meta;
    if(!isCustom)  authorities = 'flytigerbutton' + authorities;
    return authList.toString().toLocaleLowerCase().indexOf(authorities.toLocaleLowerCase()) &gt; -1 ;
  },
  writable: false
})
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[社交分享配置]]></title>
        <id>https://rat1991.github.io/post/she-jiao-fen-xiang-pei-zhi/</id>
        <link href="https://rat1991.github.io/post/she-jiao-fen-xiang-pei-zhi/">
        </link>
        <updated>2020-06-15T12:27:54.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="微信分享">微信分享</h2>
<p>调用微信JSSDK需要先做<a href="https://mp.weixin.qq.com/">公众账号</a>配置，简单来说有以下步骤:</p>
<ol>
<li>在认证的公众账号上绑定一个已备案的域名</li>
<li>根据appId和appSecret在服务器上设置签名获取的方法</li>
<li>在该认证域名下的页面获取服务器签名，得到appId、timestamp、nonceStr、signature值</li>
</ol>
<p>然后执行以下几步：</p>
<ol>
<li>注入<a href="https://res.wx.qq.com/open/js/jweixin-1.3.1.js">js-sdk</a></li>
<li>调用wx.config()</li>
</ol>
<pre><code class="language-javascript">wx.config({
  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
  appId: '', // 必填，公众号的唯一标识
  timestamp: , // 必填，生成签名的时间戳
  nonceStr: '', // 必填，生成签名的随机串
  signature: '',// 必填，签名
  jsApiList: [] // 必填，需要使用的JS接口列表
});
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h2 id="微信分享">微信分享</h2>
<p>调用微信JSSDK需要先做<a href="https://mp.weixin.qq.com/">公众账号</a>配置，简单来说有以下步骤:</p>
<ol>
<li>在认证的公众账号上绑定一个已备案的域名</li>
<li>根据appId和appSecret在服务器上设置签名获取的方法</li>
<li>在该认证域名下的页面获取服务器签名，得到appId、timestamp、nonceStr、signature值</li>
</ol>
<p>然后执行以下几步：</p>
<ol>
<li>注入<a href="https://res.wx.qq.com/open/js/jweixin-1.3.1.js">js-sdk</a></li>
<li>调用wx.config()</li>
</ol>
<pre><code class="language-javascript">wx.config({
  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
  appId: '', // 必填，公众号的唯一标识
  timestamp: , // 必填，生成签名的时间戳
  nonceStr: '', // 必填，生成签名的随机串
  signature: '',// 必填，签名
  jsApiList: [] // 必填，需要使用的JS接口列表
});
&lt;!-- more --&gt;

</code></pre>
<ol start="3">
<li>调用wx.ready()</li>
</ol>
<pre><code class="language-javascript">wx.ready(function(){
  // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。
  var config = {
      title: title, // 分享标题
      desc: desc, // 分享描述
      link: url, // 分享链接（最好是后台JS安全域名）
      imgUrl: img, // 分享图标
      success: function(){
        console.log('wx config success');
      },
      cancel: function(){
        console.log('wx config cancel');
      }
  };
  wx.onMenuShareAppMessage(share);  // 微信好友
  wx.onMenuShareTimeline(share);  // 朋友圈
  wx.onMenuShareQQ(share);  // QQ
  wx.onMenuShareQZone(share);  // QQ空间
  wx.onMenuShareWeibo(share);  // 腾讯微博
});</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://rat1991.github.io/post/hello-gridea/</id>
        <link href="https://rat1991.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>